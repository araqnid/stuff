CreateInsertItem=insert into work.item(queue_code, item_status_code, reference, payload) values(:queue_code, 'Q', :reference, :payload)
CreateInsertItemEvent=insert into work.item_event(queue_code, reference, item_event_type_code, context) values(:queue_code, :reference, 'Q', cast(:context as json))

MarkInProgressUpdateItem=update work.item set item_status_code = 'I' where item.queue_code = :queue_code and item.reference = :reference
MarkInProgressInsertItemEvent=insert into work.item_event(queue_code, reference, item_event_type_code, context) values(:queue_code, :reference, 'I', cast(:context as json))

MarkProcessedUpdateItem=update work.item set item_status_code = 'P' where item.queue_code = :queue_code and item.reference = :reference
MarkProcessedInsertItemEvent=insert into work.item_event(queue_code, reference, item_event_type_code, context) values(:queue_code, :reference, 'P', cast(:context as json))

MarkFailedUpdateItem=update work.item set item_status_code = 'F' where item.queue_code = :queue_code and item.reference = :reference
MarkFailedInsertItemEvent=insert into work.item_event(queue_code, reference, item_event_type_code, context) values(:queue_code, :reference, 'F', cast(:context as json))

SetupCreateSchema=create schema if not exists work
SetupCreateTableItemStatus=create table if not exists work.item_status(item_status_code char primary key, name text not null)
SetupPopulateItemStatus=insert into work.item_status(item_status_code, name) select * from (values('Q', 'Queued'),('I','In progress'),('P','Processed'),('F','Failed')) v(item_status_code,name) where not exists (select 1 from work.item_status x where x.item_status_code = v.item_status_code)
SetupCreateTableItemEventType=create table if not exists work.item_event_type(item_event_type_code char primary key, name text not null)
SetupPopulateItemEventType=insert into work.item_event_type(item_event_type_code, name) select * from (values('Q', 'Queued'),('I','In progress'),('P','Processed'),('F','Failed')) v(item_event_type_code,name) where not exists (select 1 from work.item_event_type x where x.item_event_type_code = v.item_event_type_code)
SetupCreateTableItem=create table if not exists work.item(queue_code text not null, reference text not null, item_status_code char not null references work.item_status(item_status_code), payload bytea, primary key(queue_code, reference))
SetupCreateTableItemEvent=create table if not exists work.item_event(item_event_id serial primary key, queue_code text not null, reference text not null, item_event_type_code char not null references work.item_event_type(item_event_type_code), context json, created_at timestamp not null default (current_timestamp), foreign key (queue_code, reference) references work.item(queue_code, reference))
