apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

mainClassName = 'org.araqnid.stuff.Main'
sourceCompatibility = 1.8

ext {
  jettyVersion = '9.3.6.v20151106'
  jacksonVersion = '2.6.3'
  resteasyVersion = '3.0.13.Final'
  hibernateVersion = '4.3.8.Final'
  buildNumber = System.getenv("BUILD_NUMBER") ?: System.getenv("TRAVIS_BUILD_NUMBER")
}

if (ext.buildNumber) version = '0.0.' + ext.buildNumber

jar {
    manifest {
        attributes 'Implementation-Title': project.description ?: project.name,
                   'X-Service-Class': mainClassName
        if (version) attributes 'Implementation-Version': version
    }
    into('stuff/web') {
        from('web')
    }
}

sourceSets {
    integrationTest {
        compileClasspath += main.output + test.output;
        runtimeClasspath += main.output + test.output;
    }
    browserTest {
        compileClasspath += main.output;
        runtimeClasspath += main.output;
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    browserTestCompile.extendsFrom testCompile
    browserTestRuntime.extendsFrom testRuntime

    compile.exclude group: 'org.apache.geronimo.bundles', module: 'json'

    // use jcl-over-slf4j instead
    compile.exclude group: 'commons-logging', module: 'commons-logging'

    // use version 5 in com.fasterxml.woodstock group instead
    compile.exclude module: 'woodstox-core-asl'
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.guava:guava:19.0-rc2'
    compile 'com.google.inject:guice:4.0'
    compile 'com.google.inject.extensions:guice-servlet:4.0'
    compile 'com.google.inject.extensions:guice-multibindings:4.0'
    compile 'org.slf4j:slf4j-api:1.7.13'
    compile 'org.eclipse.jetty:jetty-server:' + jettyVersion
    compile 'org.eclipse.jetty:jetty-servlet:' + jettyVersion
    compile 'org.eclipse.jetty:apache-jsp:' + jettyVersion
    compile 'org.eclipse.jetty:apache-jstl:' + jettyVersion
    compile 'com.surftools:BeanstalkClient:1.4.6'
    compile 'redis.clients:jedis:2.8.0'
    compile 'com.google.code.findbugs:jsr305:3.0.0'
    compile 'org.hibernate:hibernate-core:' + hibernateVersion
    compile 'org.hibernate:hibernate-entitymanager:' + hibernateVersion
    compile 'org.jboss.resteasy:resteasy-jaxrs:' + resteasyVersion
    compile 'org.jboss.resteasy:resteasy-guice:' + resteasyVersion
    compile 'org.jboss.resteasy:async-http-servlet-3.0:' + resteasyVersion
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:' + jacksonVersion
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-xml-provider:' + jacksonVersion
    compile 'com.fasterxml.jackson.module:jackson-module-guice:' + jacksonVersion
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-smile:' + jacksonVersion
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:' + jacksonVersion
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:' + jacksonVersion
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:' + jacksonVersion
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-guava:' + jacksonVersion
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk7:' + jacksonVersion
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:' + jacksonVersion
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:' + jacksonVersion
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:' + jacksonVersion
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-json-org:' + jacksonVersion
    compile 'com.fasterxml.jackson.module:jackson-module-afterburner:' + jacksonVersion
    compile 'com.fasterxml.jackson.module:jackson-module-mrbean:' + jacksonVersion
    compile 'org.elasticsearch:elasticsearch:2.0.0'
    compile 'org.json:json:20141113'
    compile 'com.fasterxml.woodstox:woodstox-core:5.0.1'
    compile 'com.lexicalscope.eventcast:eventcast:1.0.2'
    compile 'org.postgresql:postgresql:9.4-1203-jdbc42'
    compile 'org.slf4j:jcl-over-slf4j:1.7.13'
    compile 'commons-codec:commons-codec:1.10'
    compile 'commons-io:commons-io:2.4'
    compile 'xml-apis:xml-apis:1.4.01'
    runtime 'ch.qos.logback:logback-classic:1.1.3'
    runtime 'net.java.dev.jna:jna:4.2.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.hamcrest:hamcrest-integration:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'joda-time:joda-time:2.9.1'
    testCompile 'org.threeten:threeten-extra:0.9'
    testCompile 'xom:xom:1.2.5'
    browserTestCompile ('org.seleniumhq.selenium:selenium-java:2.48.2') {
        exclude module: 'httpclient'
    }
    integrationTestCompile 'org.apache.httpcomponents:httpclient:4.5.1'
    // marking this as integrationTestCompile causes a conflict for Eclipse which tries to take the transitive 4.2 version via resteasy too
    compile 'org.apache.httpcomponents:httpclient:4.5.1'
}

task runtimeDeps(dependsOn: 'processResources') {
    def sha1 = java.security.MessageDigest.getInstance("SHA-1")
    def metainf = new File("$buildDir/resources/main/META-INF")
    def depsFile = new File(metainf, project.name + ".deps.txt")

    outputs.file depsFile
    outputs.upToDateWhen {
        if (!depsFile.exists()) return false
        def currentContent = depsFile.text
        def newArtifacts = 0
        configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            if (currentContent.indexOf(' ' + artifact.moduleVersion.id + ' ' + artifact.type + '\n') < 0) newArtifacts++
        }
        return newArtifacts == 0
    }

    doLast {
        metainf.mkdirs()
        depsFile.text = ''
        configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            depsFile.text += sha1.digest(artifact.file.bytes).collect {String.format "%02x", it}.join() + ' ' + artifact.moduleVersion.id + ' ' + artifact.type + '\n'
        }
    }
}

jar.dependsOn(runtimeDeps)

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    reports.html.destination = file("$buildDir/reports/integationTests")
}
integrationTest.shouldRunAfter(test)

task browserTest(type: Test) {
    testClassesDir = sourceSets.browserTest.output.classesDir
    classpath = sourceSets.browserTest.runtimeClasspath
    reports.html.destination = file("$buildDir/reports/browserTests")
}
browserTest.shouldRunAfter(integrationTest)

build.dependsOn(integrationTestClasses, browserTestClasses)
check.dependsOn(integrationTest)

eclipse {
    classpath {
        plusConfigurations += [ configurations.integrationTestCompile ];
        plusConfigurations += [ configurations.browserTestCompile ];
        file {
            whenMerged { classpath ->
                def libs = classpath.entries.findAll { it.kind == 'lib' }
                libs.findAll { it.moduleVersion?.group == 'com.google.inject' && it.moduleVersion?.name == 'guice' }.collect { entry ->
                    entry.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('discouraged', 'com/google/inject/Inject'))
                    entry.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('discouraged', 'com/google/inject/Provider'))
                    entry.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('discouraged', 'com/google/inject/BindingAnnotation'))
                    entry.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('discouraged', 'com/google/inject/ScopeAnnotation'))
                    entry.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('discouraged', 'com/google/inject/Singleton'))
                    entry.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('discouraged', 'com/google/inject/name/Named'))
                }
            }
        }
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
    }
}

run {
    environment("PGUSER", "steve")
    environment("PGPASSWORD", "xyzzy")
}

task runFromJar(type: JavaExec, dependsOn: 'jar') {
    classpath configurations.runtime
    classpath tasks.jar.archivePath
    main mainClassName
    environment("PGUSER", "steve")
    environment("PGPASSWORD", "xyzzy")
}
