apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'gradle-one-jar'

mainClassName = 'org.araqnid.stuff.Main'
sourceCompatibility = 1.8
version = '0.0.' + (System.getenv("BUILD_NUMBER") ?: System.getenv("TRAVIS_BUILD_NUMBER") ?: "0")

ext {
  jettyVersion = '9.2.10.v20150310'
  jacksonVersion = '2.5.1'
  resteasyVersion = '3.0.11.Final'
  hibernateVersion = '4.3.8.Final'
}

jar {
    manifest {
        attributes 'Implementation-Title': project.description ?: project.name,
                   'Implementation-Version': version,
                   'X-Service-Class': mainClassName
    }
}

sourceSets {
    integrationTest {
        compileClasspath += main.output + test.output;
        runtimeClasspath += main.output + test.output;
    }
    browserTest {
        compileClasspath += main.output;
        runtimeClasspath += main.output;
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    browserTestCompile.extendsFrom testCompile
    browserTestRuntime.extendsFrom testRuntime
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.guava:guava:18.0'
    compile 'com.google.inject:guice:4.0-beta5'
    compile 'com.google.inject.extensions:guice-servlet:4.0-beta5'
    compile 'com.google.inject.extensions:guice-multibindings:4.0-beta5'
    compile 'org.slf4j:slf4j-api:1.7.10'
    compile 'org.eclipse.jetty:jetty-server:' + jettyVersion
    compile 'org.eclipse.jetty:jetty-servlet:' + jettyVersion
    compile 'org.eclipse.jetty:apache-jsp:' + jettyVersion
    compile 'org.eclipse.jetty:apache-jstl:' + jettyVersion
    compile 'com.surftools:BeanstalkClient:1.4.6'
    compile 'redis.clients:jedis:2.6.0'
    compile 'com.google.code.findbugs:jsr305:3.0.0'
    compile 'org.hibernate:hibernate-core:' + hibernateVersion
    compile 'org.hibernate:hibernate-entitymanager:' + hibernateVersion
    compile 'org.jboss.resteasy:resteasy-jaxrs:' + resteasyVersion
    compile 'org.jboss.resteasy:resteasy-guice:' + resteasyVersion
    compile 'org.jboss.resteasy:resteasy-jackson2-provider:' + resteasyVersion
    compile 'org.jboss.resteasy:async-http-servlet-3.0:' + resteasyVersion
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:' + jacksonVersion
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:' + jacksonVersion
    compile 'com.fasterxml.jackson.module:jackson-module-guice:' + jacksonVersion
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-guava:' + jacksonVersion
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk7:' + jacksonVersion
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:' + jacksonVersion
    compile 'com.lexicalscope.eventcast:eventcast:1.0.2'
    compile 'joda-time:joda-time:2.7'
    compile 'org.postgresql:postgresql:9.3-1102-jdbc41'
    runtime 'ch.qos.logback:logback-classic:1.1.2'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.hamcrest:hamcrest-integration:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    browserTestCompile ('org.seleniumhq.selenium:selenium-java:2.42.2') {
        exclude module: 'httpclient'
    }
    integrationTestCompile 'org.apache.httpcomponents:httpclient:4.4'
    // marking this as integrationTestCompile causes a conflict for Eclipse which tries to take the transitive 4.2 version via resteasy too
    compile 'org.apache.httpcomponents:httpclient:4.4'
}

task runtimeDeps(dependsOn: 'processResources') {
    def sha1 = java.security.MessageDigest.getInstance("SHA-1")
    def metainf = new File("$buildDir/resources/main/META-INF")
    def depsFile = new File(metainf, project.name + ".deps.txt")

    outputs.file depsFile
    outputs.upToDateWhen {
        if (!depsFile.exists()) return false
        def currentContent = depsFile.text
        def newArtifacts = 0
        configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            if (currentContent.indexOf(' ' + artifact.moduleVersion.id + ' ' + artifact.type + '\n') < 0) newArtifacts++
        }
        return newArtifacts == 0
    }

    doLast {
        metainf.mkdirs()
        depsFile.text = ''
        configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            depsFile.text += sha1.digest(artifact.file.bytes).collect {String.format "%02x", it}.join() + ' ' + artifact.moduleVersion.id + ' ' + artifact.type + '\n'
        }
    }
}

jar.dependsOn(runtimeDeps)

task integrationTest(type: Test, dependsOn: 'test') {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task browserTest(type: Test) {
    testClassesDir = sourceSets.browserTest.output.classesDir
    classpath = sourceSets.browserTest.runtimeClasspath
}

build.dependsOn(integrationTestClasses, browserTestClasses)
check.dependsOn(integrationTest)

eclipse {
    classpath {
        plusConfigurations += configurations.integrationTestCompile;
        plusConfigurations += configurations.browserTestCompile;
    }
}

task proguard(type: proguard.gradle.ProGuardTask) {
    dependsOn 'jar'
    injars file('build/libs/stuff-0.0.0.jar')
    injars configurations.runtime.filter { it.toString().contains("guava-18") }
    injars configurations.runtime.filter { !(it.toString().contains("guava-18") || it.toString().contains("org.jboss.spec.javax.annotation")) }
    outjars file('build/libs/stuff_out.jar')
    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    libraryjars "${System.getProperty('java.home')}/lib/jce.jar"
    dontoptimize
    dontobfuscate
    allowaccessmodification
    dontwarn 'org.jboss.resteasy.**'
    dontwarn 'javax.xml.**'
    dontwarn 'org.w3c.dom.**'
    dontwarn 'org.joda.time.**'
    dontwarn 'org.xml.sax.**'
    dontwarn 'org.jboss.logging.**'
    dontwarn 'org.hibernate.**'
    dontwarn 'org.jboss.jandex.**'
    dontwarn 'org.eclipse.jetty.**'
    dontwarn 'org.eclipse.jdt.**'
    dontwarn 'org.dom4j.**'
    dontwarn 'org.apache.taglibs.**'
    dontwarn 'org.apache.jasper.**'
    dontwarn 'javassist.**'
    dontwarn 'ch.qos.logback.**'
    dontwarn 'org.apache.commons.logging.**'
    dontwarn 'net.sf.cglib.**'
    dontwarn 'com.sun.xml.internal.**'
    dontwarn 'com.sun.istack.**'
    dontwarn 'javax.transaction.*'
    dontwarn 'com.google.inject.internal.**'
    dontwarn 'javax.sql.*'
    dontnote 'javax.activation.**'
    dontnote 'org.w3c.dom.**'
    dontnote 'org.xml.sax.**'
    dontnote 'javax.xml.**'
    dontnote 'javax.transaction.**'
    dontnote 'javax.annotation.**'
    dontnote 'com.sun.activation.registries.**'
    adaptresourcefilecontents '*.xml'
    //repackageclasses ""
    printmapping 'proguard.map'
    keep 'public class org.araqnid.stuff.Main { \
      public static void main(java.lang.String[]); \
    }'
    keep 'class * { \
        @com.google.inject.Inject *; \
        @com.google.inject.Provides *; \
    }'
    keep 'class com.google.inject.internal.util.** { *; }'
    keep 'class org.jboss.resteasy.logging.impl.Slf4jLogger { <init>(...); }'
    keep 'class org.eclipse.jetty.apache.jsp.JuliLog {  <init>(...); }'
    keep 'class org.hibernate.internal.CoreMessageLogger_$logger { <init>(...); }'
    keep 'class org.hibernate.annotations.common.util.impl.Log_$logger { <init>(...); }'
    keep 'class org.apache.tomcat.util.descriptor.tld.TldRuleSet$* { *; }'
    keep 'class org.apache.tomcat.util.descriptor.tld.* { public void set*(...); }'
    keep 'public class org.jboss.resteasy.plugins.providers.* { public void <init>(...); }'
    keepclassmembers 'enum * { \
        public static **[] values(); \
        public static ** valueOf(java.lang.String); \
    }'
}

task oneJar(type: OneJar) {
    mainClass = mainClassName
    manifest {
        attributes 'One-Jar-URL-Factory': 'com.simontuffs.onejar.JarClassLoader$OneJarURLFactory'
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.2'
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
    }
}

run {
    environment("PGUSER", "steve")
    environment("PGPASSWORD", "xyzzy")
}
